// app/api/tasks/route.ts
import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/lib/mongoose";
import TaskContent, { type TaskContent as TaskDoc } from "@/models/TaskContent";
import ProjectContent, {
  type ProjectContent as ProjectDoc,
} from "@/models/ProjectContent";
import { getSessionUserId } from "@/lib/session";
import { canEditProject } from "@/lib/permissions";
import { type FilterQuery } from "mongoose";

export const runtime = "nodejs";

// Match your real enum from the schema
type Priority = "Low" | "Medium" | "High" | "Normal";

// GET /api/tasks?projectId=...&status=...
export async function GET(req: NextRequest) {
  const userId = await getSessionUserId();
  await dbConnect();

  const searchParams = req.nextUrl.searchParams;
  const projectId = searchParams.get("projectId") ?? undefined;
  const status = searchParams.get("status") ?? undefined;

  const filter: FilterQuery<TaskDoc> = {
    $or: [{ allowedUsers: userId }, { assigned: userId }, { creator: userId }],
  };
  if (projectId) filter.projectId = projectId;
  if (status) filter.status = status as TaskDoc["status"];

  const tasks = await TaskContent.find(filter)
    .sort({ createdAt: -1 })
    .lean<TaskDoc[]>();

  return NextResponse.json(tasks);
}

// Create a task (must be editor on the project)
export async function POST(req: NextRequest) {
  const userId = await getSessionUserId();
  await dbConnect();

  const body = (await req.json()) as Partial<TaskDoc>;

  if (!body.projectId) {
    return NextResponse.json({ error: "projectId required" }, { status: 400 });
  }

  const project = await ProjectContent.findById(
    body.projectId
  ).lean<ProjectDoc | null>();
  if (!project)
    return NextResponse.json({ error: "Project not found" }, { status: 404 });

  if (!canEditProject(project, userId)) {
    return NextResponse.json({ error: "Forbidden" }, { status: 403 });
  }

  const dueDate =
    body.dueDate && typeof body.dueDate === "string"
      ? new Date(body.dueDate)
      : undefined;

  const taskData: TaskDoc = {
    // @ts-expect-error: _id is generated by MongoDB automatically
    _id: undefined,
    projectId: body.projectId,
    creator: userId,
    name: body.name ?? "",
    title: body.title ?? "",
    description: body.description ?? "",
    active: body.active ?? true,
    status: (body.status ?? "open") as TaskDoc["status"],
    assigned: body.assigned ?? "",
    dueDate,
    attachedFiles: Array.isArray(body.attachedFiles) ? body.attachedFiles : [],
    allowedUsers: Array.isArray(body.allowedUsers) ? body.allowedUsers : [],
    priority: (body.priority as Priority) ?? "Normal",
    createdAt: new Date(),
    updatedAt: new Date(),
  };

  const created = await TaskContent.create(taskData);
  return NextResponse.json(created, { status: 201 });
}
